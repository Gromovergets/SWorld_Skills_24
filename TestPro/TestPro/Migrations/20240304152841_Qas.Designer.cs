// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPro.Models2;

#nullable disable

namespace TestPro.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20240304152841_Qas")]
    partial class Qas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestPro.Models2.Card", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateP")
                        .HasColumnType("datetime")
                        .HasColumnName("date_p");

                    b.Property<string>("Directions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("directions");

                    b.Property<int>("IdDiseases")
                        .HasColumnType("int")
                        .HasColumnName("id_diseases");

                    b.Property<string>("IdDoctor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("id_doctor")
                        .IsFixedLength();

                    b.Property<int>("IdPatient")
                        .HasColumnType("int")
                        .HasColumnName("id_patient");

                    b.Property<string>("InfoDop")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("info_dop");

                    b.Property<int?>("Recipe")
                        .HasColumnType("int")
                        .HasColumnName("recipe");

                    b.HasKey("Id");

                    b.HasIndex("IdDiseases");

                    b.HasIndex("Recipe");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("TestPro.Models2.Disease", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdCard")
                        .HasColumnType("int")
                        .HasColumnName("id_card");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("TestPro.Models2.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Midlename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("midlename");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Proffecional")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("TestPro.Models2.Drug", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Drug", (string)null);
                });

            modelBuilder.Entity("TestPro.Models2.Event", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("IdCard")
                        .HasColumnType("int")
                        .HasColumnName("id_card");

                    b.Property<int>("IdService")
                        .HasColumnType("int")
                        .HasColumnName("id_service");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Result")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("result");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdService");

                    b.HasIndex("Type");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TestPro.Models2.EventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("EventType", (string)null);
                });

            modelBuilder.Entity("TestPro.Models2.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("adress");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<int?>("IdCard")
                        .HasColumnType("int")
                        .HasColumnName("id_card");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("number")
                        .IsFixedLength();

                    b.Property<string>("NumberPassport")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("number_passport")
                        .IsFixedLength();

                    b.Property<string>("Oname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Photo")
                        .HasMaxLength(50)
                        .HasColumnType("binary(50)")
                        .HasColumnName("photo")
                        .IsFixedLength();

                    b.Property<string>("SeriaPassport")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("seria_passport")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("TestPro.Models2.Service", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cost")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("cost")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TestPro.Models2.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("NameRole")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name_role");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestPro.Models2.Card", b =>
                {
                    b.HasOne("TestPro.Models2.User", "IdNavigation")
                        .WithOne("Card")
                        .HasForeignKey("TestPro.Models2.Card", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Card_User");

                    b.HasOne("TestPro.Models2.Disease", "IdDiseasesNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("IdDiseases")
                        .IsRequired()
                        .HasConstraintName("FK_Card_Diseases");

                    b.HasOne("TestPro.Models2.Drug", "RecipeNavigation")
                        .WithMany("Cards")
                        .HasForeignKey("Recipe")
                        .HasConstraintName("FK_Card_Drug");

                    b.Navigation("IdDiseasesNavigation");

                    b.Navigation("IdNavigation");

                    b.Navigation("RecipeNavigation");
                });

            modelBuilder.Entity("TestPro.Models2.Event", b =>
                {
                    b.HasOne("TestPro.Models2.Card", "IdCardNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdCard")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Card");

                    b.HasOne("TestPro.Models2.Service", "IdServiceNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdService")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Services");

                    b.HasOne("TestPro.Models2.EventType", "TypeNavigation")
                        .WithMany("Events")
                        .HasForeignKey("Type")
                        .HasConstraintName("FK_Events_EventType");

                    b.Navigation("IdCardNavigation");

                    b.Navigation("IdServiceNavigation");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("TestPro.Models2.User", b =>
                {
                    b.HasOne("TestPro.Models2.Doctor", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("FK_Users_Doctor");

                    b.HasOne("TestPro.Models2.Patient", "IdRole1")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("FK_Users_Patient");

                    b.Navigation("IdRole1");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("TestPro.Models2.Card", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TestPro.Models2.Disease", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("TestPro.Models2.Doctor", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestPro.Models2.Drug", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("TestPro.Models2.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TestPro.Models2.Patient", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestPro.Models2.Service", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TestPro.Models2.User", b =>
                {
                    b.Navigation("Card");
                });
#pragma warning restore 612, 618
        }
    }
}
